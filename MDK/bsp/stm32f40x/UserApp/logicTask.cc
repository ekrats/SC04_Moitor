#include "logicTask.h"
#include "stm32f4xx.h"
#include <rtthread.h>
#include "logicApp.h"
#include "appMonitor.h"
#include "appModule.h"
#include "sysInfo.h"

extern struct rt_semaphore sem_logic_task;

static void Bsp_Logic_task(void* parameter);

/*******************************************************************************
* Function Name  : Task_MainLogic_create 
* Description    :  
*                   
*
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void Task_MainLogic_create(uint8_t priority)
{
	rt_thread_t init_thread;

	//------- init thread
	init_thread = rt_thread_create("Logic",
		Bsp_Logic_task, RT_NULL,
		1024, priority, 20);
	rt_thread_startup(init_thread);
}

/*******************************************************************************
* Function Name  : Bsp_Logic_task 
* Description    :  
*                   
*
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
static void Bsp_Logic_task(void* parameter)
{
	
	//uint8_t Fop_Err = 0;
	//-------------------------------------------------------
	// 延时200ms,待其它功能块初始化完成
	//-------------------------------------------------------	
	rt_thread_delay(200);
	sysInfo.sysInfInit();
	MB_LGA.MB_SYS_INFO.rParFlag = true;
	for (;;)
	{
		//----------------------------------------------------------
		// wait for semaphore
		//----------------------------------------------------------
		rt_sem_take(&sem_logic_task, RT_WAITING_FOREVER);
		//----------------------------------------------------------
		// 数字量输入数据更新
		//----------------------------------------------------------
		DigitalInputUpdate();
		//----------------------------------------------------------
		// 模拟量输入数据更新
		//----------------------------------------------------------
		AnalogInputUpdate();
		//----------------------------------------------------------
		// HMI输入数据更新
		//----------------------------------------------------------
		HmiInputUpdate();
		//----------------------------------------------------------
		// CAN总线输入(接收)数据更新
		//----------------------------------------------------------
		CanInputUpdate();
		//----------------------------------------------------------
		// 监控板状态数据更新
		//----------------------------------------------------------
		MonitorUpdate();
		//----------------------------------------------------------
		// 故障保护逻辑
		//----------------------------------------------------------
		FaultManage();
		//----------------------------------------------------------
		// 系统状态机
		//----------------------------------------------------------
		SysMode.ChargeModeManage();
		SysMode.System_Output();
		//----------------------------------------------------------
		// DCDC状态机
		//----------------------------------------------------------
		DcDcManage();
		//----------------------------------------------------------
		// 参数管理
		//----------------------------------------------------------
		ParManage();
		//----------------------------------------------------------
		// 数字量输出数据更新
		//----------------------------------------------------------
		DigitalOutputUpdate();
		//----------------------------------------------------------
		// HMI输出数据更新
		//----------------------------------------------------------
		HmiOutputUpdate();
		//----------------------------------------------------------
		// CAN总线输出(发送)数据更新
		//----------------------------------------------------------
		CanOutputUpdate();
		
		UserRecord();
	}
}
